{% comment %}
  Endless Scrolling Text Section
  - Uses Slick carousel for infinite auto-scrolling
  - Background color, border color (top/bottom), and vertical padding are editable
  - Each text is a block, separated by a dash
{% endcomment %}

<section
  class="ud-endless-scrolling-text-section tw-text-18 md:tw-text-24"
  style="background: {{ section.settings.bg_color }}; border-block: 1px solid {{ section.settings.border_top }}; border-bottom: 1px solid {{ section.settings.border_bottom }}; padding-top: {{ section.settings.pt }}px; padding-bottom: {{ section.settings.pb }}px;"
>
  <div class="scrolling-container-{{ section.id }} tw-overflow-hidden tw-whitespace-nowrap">
    <div class="scrolling-text-{{ section.id }} tw-animate-scroll tw-inline-block tw-w-fit tw-pr-2">
      {% for block in section.blocks %}
        <span class="tw-font-cursive tw-text-lg tw-inline-block tw-whitespace-nowrap tw-px-4">
          {{ block.settings.text }}
        </span>
        <span class="tw-inline-block tw-px-2">&#8212;</span>
      {% endfor %}
    </div>
  </div>
</section>

<style>
  .scrolling-container-{{ section.id }} {
    display: flex;
    overflow: hidden;
    width: 100%;
  }

  @keyframes scroll-{{ section.id }} {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-100%);
    }
  }

  .scrolling-text-{{ section.id }} {
    flex-shrink: 0;
    width: fit-content;
    animation: scroll-{{ section.id }} 20s linear infinite;
    white-space: nowrap;
  }

  .scrolling-container-{{ section.id }}:hover .scrolling-text-{{ section.id }} {
    animation-play-state: paused;
  }
</style>

<script type="module">
  try {
    const container = document.querySelector('.scrolling-container-{{ section.id }}');
    const originalText = container.querySelector('.scrolling-text-{{ section.id }}');
    const originalTextWidth = originalText.offsetWidth || 1;

    function updateScrollers() {
      const currentTexts = container.querySelectorAll('.scrolling-text-{{ section.id }}');
      currentTexts.forEach((text) => {
        text.style.animation = 'none';
      });

      container.offsetHeight;

      const windowWidth = window.innerWidth;

      const copiesNeeded = Math.max(2, Math.ceil(windowWidth / originalTextWidth) + 1);
      const currentCount = currentTexts.length;

      if (currentCount > copiesNeeded) {
        for (let i = copiesNeeded; i < currentCount; i++) {
          container.removeChild(currentTexts[i]);
        }
      }

      if (currentCount < copiesNeeded) {
        for (let i = currentCount; i < copiesNeeded; i++) {
          const clone = originalText.cloneNode(true);
          clone.setAttribute('aria-hidden', 'true');
          container.appendChild(clone);
        }
      }

      const speed = Math.max(15, originalTextWidth / 50);

      setTimeout(() => {
        const finalTexts = container.querySelectorAll('.scrolling-text-{{ section.id }}');
        finalTexts.forEach((text) => {
          text.style.animationDuration = `${speed}s`;
          text.style.animation = `scroll-{{ section.id }} ${speed}s linear infinite`;
        });
      }, 50);
    }

    document.addEventListener('DOMContentLoaded', updateScrollers);

    let resizeTimer;
    window.addEventListener('resize', function () {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(updateScrollers, 250);
    });
  } catch {
    console.log('There was a problem with the endless scrolling text');
  }
</script>

{% schema %}
{
  "name": "Endless Scrolling Text",
  "settings": [
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background Color",
      "default": "#ecebe5"
    },
    {
      "type": "color",
      "id": "border_top",
      "label": "Top Border Color",
      "default": "#222"
    },
    {
      "type": "color",
      "id": "border_bottom",
      "label": "Bottom Border Color",
      "default": "#222"
    },
    {
      "type": "number",
      "id": "pt",
      "label": "Padding Top (px)",
      "default": 12
    },
    {
      "type": "number",
      "id": "pb",
      "label": "Padding Bottom (px)",
      "default": 12
    }
  ],
  "blocks": [
    {
      "type": "text_block",
      "name": "Text Block",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Text"
        }
      ]
    }
  ],
  "max_blocks": 20,
  "presets": [
    {
      "name": "Endless Scrolling Text",
      "category": "Custom"
    }
  ]
}
{% endschema %}
